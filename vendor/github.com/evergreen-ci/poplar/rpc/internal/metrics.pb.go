// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IntervalSummary struct {
	Collector string `protobuf:"bytes,1,opt,name=collector,proto3" json:"collector,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*IntervalSummary_Number
	//	*IntervalSummary_NumberValues
	//	*IntervalSummary_Point
	//	*IntervalSummary_PointValues
	Value                isIntervalSummary_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IntervalSummary) Reset()         { *m = IntervalSummary{} }
func (m *IntervalSummary) String() string { return proto.CompactTextString(m) }
func (*IntervalSummary) ProtoMessage()    {}
func (*IntervalSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_cd84eba0c47586d0, []int{0}
}
func (m *IntervalSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntervalSummary.Unmarshal(m, b)
}
func (m *IntervalSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntervalSummary.Marshal(b, m, deterministic)
}
func (dst *IntervalSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntervalSummary.Merge(dst, src)
}
func (m *IntervalSummary) XXX_Size() int {
	return xxx_messageInfo_IntervalSummary.Size(m)
}
func (m *IntervalSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_IntervalSummary.DiscardUnknown(m)
}

var xxx_messageInfo_IntervalSummary proto.InternalMessageInfo

func (m *IntervalSummary) GetCollector() string {
	if m != nil {
		return m.Collector
	}
	return ""
}

type isIntervalSummary_Value interface {
	isIntervalSummary_Value()
}

type IntervalSummary_Number struct {
	Number *SummaryInteger `protobuf:"bytes,2,opt,name=number,proto3,oneof"`
}

type IntervalSummary_NumberValues struct {
	NumberValues *SummaryIntegerSlice `protobuf:"bytes,3,opt,name=number_values,json=numberValues,proto3,oneof"`
}

type IntervalSummary_Point struct {
	Point *SummaryDouble `protobuf:"bytes,4,opt,name=point,proto3,oneof"`
}

type IntervalSummary_PointValues struct {
	PointValues *SummaryDoubleSlice `protobuf:"bytes,5,opt,name=point_values,json=pointValues,proto3,oneof"`
}

func (*IntervalSummary_Number) isIntervalSummary_Value() {}

func (*IntervalSummary_NumberValues) isIntervalSummary_Value() {}

func (*IntervalSummary_Point) isIntervalSummary_Value() {}

func (*IntervalSummary_PointValues) isIntervalSummary_Value() {}

func (m *IntervalSummary) GetValue() isIntervalSummary_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *IntervalSummary) GetNumber() *SummaryInteger {
	if x, ok := m.GetValue().(*IntervalSummary_Number); ok {
		return x.Number
	}
	return nil
}

func (m *IntervalSummary) GetNumberValues() *SummaryIntegerSlice {
	if x, ok := m.GetValue().(*IntervalSummary_NumberValues); ok {
		return x.NumberValues
	}
	return nil
}

func (m *IntervalSummary) GetPoint() *SummaryDouble {
	if x, ok := m.GetValue().(*IntervalSummary_Point); ok {
		return x.Point
	}
	return nil
}

func (m *IntervalSummary) GetPointValues() *SummaryDoubleSlice {
	if x, ok := m.GetValue().(*IntervalSummary_PointValues); ok {
		return x.PointValues
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IntervalSummary) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IntervalSummary_OneofMarshaler, _IntervalSummary_OneofUnmarshaler, _IntervalSummary_OneofSizer, []interface{}{
		(*IntervalSummary_Number)(nil),
		(*IntervalSummary_NumberValues)(nil),
		(*IntervalSummary_Point)(nil),
		(*IntervalSummary_PointValues)(nil),
	}
}

func _IntervalSummary_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IntervalSummary)
	// value
	switch x := m.Value.(type) {
	case *IntervalSummary_Number:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Number); err != nil {
			return err
		}
	case *IntervalSummary_NumberValues:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NumberValues); err != nil {
			return err
		}
	case *IntervalSummary_Point:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Point); err != nil {
			return err
		}
	case *IntervalSummary_PointValues:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PointValues); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IntervalSummary.Value has unexpected type %T", x)
	}
	return nil
}

func _IntervalSummary_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IntervalSummary)
	switch tag {
	case 2: // value.number
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SummaryInteger)
		err := b.DecodeMessage(msg)
		m.Value = &IntervalSummary_Number{msg}
		return true, err
	case 3: // value.number_values
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SummaryIntegerSlice)
		err := b.DecodeMessage(msg)
		m.Value = &IntervalSummary_NumberValues{msg}
		return true, err
	case 4: // value.point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SummaryDouble)
		err := b.DecodeMessage(msg)
		m.Value = &IntervalSummary_Point{msg}
		return true, err
	case 5: // value.point_values
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SummaryDoubleSlice)
		err := b.DecodeMessage(msg)
		m.Value = &IntervalSummary_PointValues{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IntervalSummary_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IntervalSummary)
	// value
	switch x := m.Value.(type) {
	case *IntervalSummary_Number:
		s := proto.Size(x.Number)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IntervalSummary_NumberValues:
		s := proto.Size(x.NumberValues)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IntervalSummary_Point:
		s := proto.Size(x.Point)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IntervalSummary_PointValues:
		s := proto.Size(x.PointValues)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SummaryIntegerSlice struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                []int64  `protobuf:"varint,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryIntegerSlice) Reset()         { *m = SummaryIntegerSlice{} }
func (m *SummaryIntegerSlice) String() string { return proto.CompactTextString(m) }
func (*SummaryIntegerSlice) ProtoMessage()    {}
func (*SummaryIntegerSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_cd84eba0c47586d0, []int{1}
}
func (m *SummaryIntegerSlice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryIntegerSlice.Unmarshal(m, b)
}
func (m *SummaryIntegerSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryIntegerSlice.Marshal(b, m, deterministic)
}
func (dst *SummaryIntegerSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryIntegerSlice.Merge(dst, src)
}
func (m *SummaryIntegerSlice) XXX_Size() int {
	return xxx_messageInfo_SummaryIntegerSlice.Size(m)
}
func (m *SummaryIntegerSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryIntegerSlice.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryIntegerSlice proto.InternalMessageInfo

func (m *SummaryIntegerSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SummaryIntegerSlice) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type SummaryInteger struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryInteger) Reset()         { *m = SummaryInteger{} }
func (m *SummaryInteger) String() string { return proto.CompactTextString(m) }
func (*SummaryInteger) ProtoMessage()    {}
func (*SummaryInteger) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_cd84eba0c47586d0, []int{2}
}
func (m *SummaryInteger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryInteger.Unmarshal(m, b)
}
func (m *SummaryInteger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryInteger.Marshal(b, m, deterministic)
}
func (dst *SummaryInteger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryInteger.Merge(dst, src)
}
func (m *SummaryInteger) XXX_Size() int {
	return xxx_messageInfo_SummaryInteger.Size(m)
}
func (m *SummaryInteger) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryInteger.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryInteger proto.InternalMessageInfo

func (m *SummaryInteger) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SummaryInteger) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SummaryDoubleSlice struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                []float64 `protobuf:"fixed64,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SummaryDoubleSlice) Reset()         { *m = SummaryDoubleSlice{} }
func (m *SummaryDoubleSlice) String() string { return proto.CompactTextString(m) }
func (*SummaryDoubleSlice) ProtoMessage()    {}
func (*SummaryDoubleSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_cd84eba0c47586d0, []int{3}
}
func (m *SummaryDoubleSlice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryDoubleSlice.Unmarshal(m, b)
}
func (m *SummaryDoubleSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryDoubleSlice.Marshal(b, m, deterministic)
}
func (dst *SummaryDoubleSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryDoubleSlice.Merge(dst, src)
}
func (m *SummaryDoubleSlice) XXX_Size() int {
	return xxx_messageInfo_SummaryDoubleSlice.Size(m)
}
func (m *SummaryDoubleSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryDoubleSlice.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryDoubleSlice proto.InternalMessageInfo

func (m *SummaryDoubleSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SummaryDoubleSlice) GetValue() []float64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type SummaryDouble struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryDouble) Reset()         { *m = SummaryDouble{} }
func (m *SummaryDouble) String() string { return proto.CompactTextString(m) }
func (*SummaryDouble) ProtoMessage()    {}
func (*SummaryDouble) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_cd84eba0c47586d0, []int{4}
}
func (m *SummaryDouble) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryDouble.Unmarshal(m, b)
}
func (m *SummaryDouble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryDouble.Marshal(b, m, deterministic)
}
func (dst *SummaryDouble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryDouble.Merge(dst, src)
}
func (m *SummaryDouble) XXX_Size() int {
	return xxx_messageInfo_SummaryDouble.Size(m)
}
func (m *SummaryDouble) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryDouble.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryDouble proto.InternalMessageInfo

func (m *SummaryDouble) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SummaryDouble) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*IntervalSummary)(nil), "poplar.IntervalSummary")
	proto.RegisterType((*SummaryIntegerSlice)(nil), "poplar.SummaryIntegerSlice")
	proto.RegisterType((*SummaryInteger)(nil), "poplar.SummaryInteger")
	proto.RegisterType((*SummaryDoubleSlice)(nil), "poplar.SummaryDoubleSlice")
	proto.RegisterType((*SummaryDouble)(nil), "poplar.SummaryDouble")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PoplarMetricsCollectorClient is the client API for PoplarMetricsCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoplarMetricsCollectorClient interface {
	CreateCollector(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error)
	CloseCollector(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	ResetSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	FlushSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	Add(ctx context.Context, in *IntervalSummary, opts ...grpc.CallOption) (*PoplarResponse, error)
}

type poplarMetricsCollectorClient struct {
	cc *grpc.ClientConn
}

func NewPoplarMetricsCollectorClient(cc *grpc.ClientConn) PoplarMetricsCollectorClient {
	return &poplarMetricsCollectorClient{cc}
}

func (c *poplarMetricsCollectorClient) CreateCollector(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/CreateCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) CloseCollector(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/CloseCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) ResetSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/ResetSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) FlushSample(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/FlushSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsCollectorClient) Add(ctx context.Context, in *IntervalSummary, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsCollector/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoplarMetricsCollectorServer is the server API for PoplarMetricsCollector service.
type PoplarMetricsCollectorServer interface {
	CreateCollector(context.Context, *CreateOptions) (*PoplarResponse, error)
	CloseCollector(context.Context, *PoplarID) (*PoplarResponse, error)
	ResetSample(context.Context, *PoplarID) (*PoplarResponse, error)
	FlushSample(context.Context, *PoplarID) (*PoplarResponse, error)
	Add(context.Context, *IntervalSummary) (*PoplarResponse, error)
}

func RegisterPoplarMetricsCollectorServer(s *grpc.Server, srv PoplarMetricsCollectorServer) {
	s.RegisterService(&_PoplarMetricsCollector_serviceDesc, srv)
}

func _PoplarMetricsCollector_CreateCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).CreateCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/CreateCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).CreateCollector(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_CloseCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).CloseCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/CloseCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).CloseCollector(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_ResetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).ResetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/ResetSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).ResetSample(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_FlushSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).FlushSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/FlushSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).FlushSample(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsCollector_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsCollectorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsCollector/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsCollectorServer).Add(ctx, req.(*IntervalSummary))
	}
	return interceptor(ctx, in, info, handler)
}

var _PoplarMetricsCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poplar.PoplarMetricsCollector",
	HandlerType: (*PoplarMetricsCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollector",
			Handler:    _PoplarMetricsCollector_CreateCollector_Handler,
		},
		{
			MethodName: "CloseCollector",
			Handler:    _PoplarMetricsCollector_CloseCollector_Handler,
		},
		{
			MethodName: "ResetSample",
			Handler:    _PoplarMetricsCollector_ResetSample_Handler,
		},
		{
			MethodName: "FlushSample",
			Handler:    _PoplarMetricsCollector_FlushSample_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _PoplarMetricsCollector_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_metrics_cd84eba0c47586d0) }

var fileDescriptor_metrics_cd84eba0c47586d0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd3, 0xcf, 0x6f, 0xda, 0x30,
	0x14, 0x07, 0x70, 0x92, 0x00, 0x1b, 0x8f, 0x5f, 0x93, 0xb7, 0xb1, 0x28, 0xdb, 0x01, 0x71, 0xe2,
	0x32, 0x34, 0x31, 0x69, 0xd3, 0x38, 0x8c, 0x0d, 0x50, 0x05, 0x87, 0xaa, 0x55, 0x90, 0x7a, 0xe8,
	0xa5, 0x32, 0xe1, 0xa9, 0x8d, 0xe4, 0xc4, 0x91, 0xed, 0x20, 0xf5, 0x9f, 0xe9, 0xdf, 0xd2, 0x3f,
	0xad, 0xc2, 0x4e, 0xa0, 0x50, 0x10, 0xe2, 0x84, 0xb1, 0xdf, 0xe7, 0x7d, 0x2d, 0xc7, 0x86, 0x7a,
	0x84, 0x4a, 0x84, 0x81, 0xec, 0x25, 0x82, 0x2b, 0x4e, 0xca, 0x09, 0x4f, 0x18, 0x15, 0x5e, 0xcd,
	0xfc, 0x9a, 0x59, 0xaf, 0x21, 0x30, 0xe0, 0x62, 0x89, 0xd9, 0xff, 0xce, 0x93, 0x0d, 0xcd, 0x59,
	0xac, 0x50, 0xac, 0x28, 0x9b, 0xa7, 0x51, 0x44, 0xc5, 0x23, 0xf9, 0x06, 0x95, 0x80, 0x33, 0x86,
	0x81, 0xe2, 0xc2, 0xb5, 0xda, 0x56, 0xb7, 0xe2, 0x6f, 0x27, 0xc8, 0x0f, 0x28, 0xc7, 0x69, 0xb4,
	0x40, 0xe1, 0xda, 0x6d, 0xab, 0x5b, 0xed, 0xb7, 0x7a, 0x59, 0x40, 0xc6, 0xd7, 0xdd, 0xee, 0x51,
	0x4c, 0x0b, 0x7e, 0x56, 0x47, 0x46, 0x50, 0x37, 0xa3, 0xbb, 0x15, 0x65, 0x29, 0x4a, 0xd7, 0xd1,
	0xf0, 0xeb, 0x61, 0x38, 0x67, 0x61, 0x80, 0xd3, 0x82, 0x5f, 0x33, 0xe6, 0x46, 0x13, 0xf2, 0x1d,
	0x4a, 0x09, 0x0f, 0x63, 0xe5, 0x16, 0xb5, 0xfd, 0xbc, 0x67, 0x27, 0x3c, 0x5d, 0xb0, 0xb5, 0x32,
	0x55, 0x64, 0x08, 0x35, 0x3d, 0xc8, 0x13, 0x4b, 0x5a, 0x79, 0x07, 0x55, 0x1e, 0x58, 0xd5, 0xc2,
	0xe4, 0x8d, 0xde, 0x41, 0x49, 0xd3, 0xce, 0x10, 0x3e, 0x1e, 0xd8, 0x1f, 0x21, 0x50, 0x8c, 0x69,
	0x84, 0xd9, 0xf1, 0xe8, 0x31, 0xf9, 0x94, 0x19, 0xd7, 0x6e, 0x3b, 0x5d, 0xc7, 0xcf, 0x1a, 0x0c,
	0xa0, 0xb1, 0xdb, 0xe0, 0x94, 0xb5, 0xb6, 0xf6, 0x2f, 0x90, 0xb7, 0x5b, 0x3d, 0x9d, 0x6d, 0xe5,
	0xfe, 0x0f, 0xd4, 0x77, 0xfc, 0xe9, 0xe8, 0x9c, 0xf6, 0x9f, 0x6d, 0x68, 0x5d, 0xeb, 0xd3, 0xba,
	0x34, 0xd7, 0x6a, 0xbc, 0xb9, 0x01, 0xff, 0xa0, 0x39, 0x16, 0x48, 0x15, 0x6e, 0xa7, 0x36, 0xdf,
	0xc3, 0x2c, 0x5c, 0x25, 0x2a, 0xe4, 0xb1, 0xf4, 0x36, 0x77, 0xc3, 0x74, 0xf2, 0x51, 0x26, 0x3c,
	0x96, 0x48, 0x06, 0xd0, 0x18, 0x33, 0x2e, 0x5f, 0x35, 0xf8, 0xb0, 0x5b, 0x39, 0x9b, 0x1c, 0xb5,
	0xbf, 0xa1, 0xea, 0xa3, 0x44, 0x35, 0xa7, 0x51, 0xc2, 0xf0, 0x3c, 0x78, 0xc1, 0x52, 0xf9, 0x70,
	0x36, 0xfc, 0x05, 0xce, 0xff, 0xe5, 0x92, 0x7c, 0xc9, 0x97, 0xf7, 0xde, 0xcb, 0x31, 0x37, 0x82,
	0xdb, 0xf7, 0xe1, 0xba, 0x34, 0xa6, 0x6c, 0x51, 0xd6, 0xcf, 0xed, 0xe7, 0x4b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xce, 0x78, 0x11, 0x5d, 0xa5, 0x03, 0x00, 0x00,
}
