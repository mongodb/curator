// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recorder.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventSendTime struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventSendTime) Reset()         { *m = EventSendTime{} }
func (m *EventSendTime) String() string { return proto.CompactTextString(m) }
func (*EventSendTime) ProtoMessage()    {}
func (*EventSendTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_recorder_801c0285f67aa560, []int{0}
}
func (m *EventSendTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventSendTime.Unmarshal(m, b)
}
func (m *EventSendTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventSendTime.Marshal(b, m, deterministic)
}
func (dst *EventSendTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendTime.Merge(dst, src)
}
func (m *EventSendTime) XXX_Size() int {
	return xxx_messageInfo_EventSendTime.Size(m)
}
func (m *EventSendTime) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendTime.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendTime proto.InternalMessageInfo

func (m *EventSendTime) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSendTime) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type EventSendInt struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventSendInt) Reset()         { *m = EventSendInt{} }
func (m *EventSendInt) String() string { return proto.CompactTextString(m) }
func (*EventSendInt) ProtoMessage()    {}
func (*EventSendInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_recorder_801c0285f67aa560, []int{1}
}
func (m *EventSendInt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventSendInt.Unmarshal(m, b)
}
func (m *EventSendInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventSendInt.Marshal(b, m, deterministic)
}
func (dst *EventSendInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendInt.Merge(dst, src)
}
func (m *EventSendInt) XXX_Size() int {
	return xxx_messageInfo_EventSendInt.Size(m)
}
func (m *EventSendInt) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendInt.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendInt proto.InternalMessageInfo

func (m *EventSendInt) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSendInt) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type EventSendBool struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                bool     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventSendBool) Reset()         { *m = EventSendBool{} }
func (m *EventSendBool) String() string { return proto.CompactTextString(m) }
func (*EventSendBool) ProtoMessage()    {}
func (*EventSendBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_recorder_801c0285f67aa560, []int{2}
}
func (m *EventSendBool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventSendBool.Unmarshal(m, b)
}
func (m *EventSendBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventSendBool.Marshal(b, m, deterministic)
}
func (dst *EventSendBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendBool.Merge(dst, src)
}
func (m *EventSendBool) XXX_Size() int {
	return xxx_messageInfo_EventSendBool.Size(m)
}
func (m *EventSendBool) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendBool.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendBool proto.InternalMessageInfo

func (m *EventSendBool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSendBool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type EventSendDuration struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Duration             *duration.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EventSendDuration) Reset()         { *m = EventSendDuration{} }
func (m *EventSendDuration) String() string { return proto.CompactTextString(m) }
func (*EventSendDuration) ProtoMessage()    {}
func (*EventSendDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_recorder_801c0285f67aa560, []int{3}
}
func (m *EventSendDuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventSendDuration.Unmarshal(m, b)
}
func (m *EventSendDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventSendDuration.Marshal(b, m, deterministic)
}
func (dst *EventSendDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendDuration.Merge(dst, src)
}
func (m *EventSendDuration) XXX_Size() int {
	return xxx_messageInfo_EventSendDuration.Size(m)
}
func (m *EventSendDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendDuration.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendDuration proto.InternalMessageInfo

func (m *EventSendDuration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSendDuration) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func init() {
	proto.RegisterType((*EventSendTime)(nil), "poplar.EventSendTime")
	proto.RegisterType((*EventSendInt)(nil), "poplar.EventSendInt")
	proto.RegisterType((*EventSendBool)(nil), "poplar.EventSendBool")
	proto.RegisterType((*EventSendDuration)(nil), "poplar.EventSendDuration")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PoplarMetricsRecorderClient is the client API for PoplarMetricsRecorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoplarMetricsRecorderClient interface {
	// Create builds a new recorder instance which creates a local file,
	// while the close recorder method flushes the contents of that
	// recorder and closes the file.
	CreateRecorder(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error)
	CloseRecorder(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Event Lifecycle methods
	BeginEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	ResetEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error)
	EndEvent(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Timers
	SetTime(ctx context.Context, in *EventSendTime, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetTotalDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Guages
	SetState(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetWorkers(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	SetFailed(ctx context.Context, in *EventSendBool, opts ...grpc.CallOption) (*PoplarResponse, error)
	// Counters
	IncOps(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	IncSize(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	IncError(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
	IncIterations(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error)
}

type poplarMetricsRecorderClient struct {
	cc *grpc.ClientConn
}

func NewPoplarMetricsRecorderClient(cc *grpc.ClientConn) PoplarMetricsRecorderClient {
	return &poplarMetricsRecorderClient{cc}
}

func (c *poplarMetricsRecorderClient) CreateRecorder(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/CreateRecorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) CloseRecorder(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/CloseRecorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) BeginEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/BeginEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) ResetEvent(ctx context.Context, in *PoplarID, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/ResetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) EndEvent(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/EndEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetTime(ctx context.Context, in *EventSendTime, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetTotalDuration(ctx context.Context, in *EventSendDuration, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetTotalDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetState(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetWorkers(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) SetFailed(ctx context.Context, in *EventSendBool, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/SetFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncOps(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncOps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncSize(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncError(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poplarMetricsRecorderClient) IncIterations(ctx context.Context, in *EventSendInt, opts ...grpc.CallOption) (*PoplarResponse, error) {
	out := new(PoplarResponse)
	err := c.cc.Invoke(ctx, "/poplar.PoplarMetricsRecorder/IncIterations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoplarMetricsRecorderServer is the server API for PoplarMetricsRecorder service.
type PoplarMetricsRecorderServer interface {
	// Create builds a new recorder instance which creates a local file,
	// while the close recorder method flushes the contents of that
	// recorder and closes the file.
	CreateRecorder(context.Context, *CreateOptions) (*PoplarResponse, error)
	CloseRecorder(context.Context, *PoplarID) (*PoplarResponse, error)
	// Event Lifecycle methods
	BeginEvent(context.Context, *PoplarID) (*PoplarResponse, error)
	ResetEvent(context.Context, *PoplarID) (*PoplarResponse, error)
	EndEvent(context.Context, *EventSendDuration) (*PoplarResponse, error)
	// Timers
	SetTime(context.Context, *EventSendTime) (*PoplarResponse, error)
	SetDuration(context.Context, *EventSendDuration) (*PoplarResponse, error)
	SetTotalDuration(context.Context, *EventSendDuration) (*PoplarResponse, error)
	// Guages
	SetState(context.Context, *EventSendInt) (*PoplarResponse, error)
	SetWorkers(context.Context, *EventSendInt) (*PoplarResponse, error)
	SetFailed(context.Context, *EventSendBool) (*PoplarResponse, error)
	// Counters
	IncOps(context.Context, *EventSendInt) (*PoplarResponse, error)
	IncSize(context.Context, *EventSendInt) (*PoplarResponse, error)
	IncError(context.Context, *EventSendInt) (*PoplarResponse, error)
	IncIterations(context.Context, *EventSendInt) (*PoplarResponse, error)
}

func RegisterPoplarMetricsRecorderServer(s *grpc.Server, srv PoplarMetricsRecorderServer) {
	s.RegisterService(&_PoplarMetricsRecorder_serviceDesc, srv)
}

func _PoplarMetricsRecorder_CreateRecorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).CreateRecorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/CreateRecorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).CreateRecorder(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_CloseRecorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).CloseRecorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/CloseRecorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).CloseRecorder(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_BeginEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).BeginEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/BeginEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).BeginEvent(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_ResetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoplarID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).ResetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/ResetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).ResetEvent(ctx, req.(*PoplarID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_EndEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).EndEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/EndEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).EndEvent(ctx, req.(*EventSendDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetTime(ctx, req.(*EventSendTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetDuration(ctx, req.(*EventSendDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetTotalDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetTotalDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetTotalDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetTotalDuration(ctx, req.(*EventSendDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetState(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetWorkers(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_SetFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).SetFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/SetFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).SetFailed(ctx, req.(*EventSendBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncOps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncOps(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncSize(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncError(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoplarMetricsRecorder_IncIterations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSendInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoplarMetricsRecorderServer).IncIterations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poplar.PoplarMetricsRecorder/IncIterations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoplarMetricsRecorderServer).IncIterations(ctx, req.(*EventSendInt))
	}
	return interceptor(ctx, in, info, handler)
}

var _PoplarMetricsRecorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poplar.PoplarMetricsRecorder",
	HandlerType: (*PoplarMetricsRecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecorder",
			Handler:    _PoplarMetricsRecorder_CreateRecorder_Handler,
		},
		{
			MethodName: "CloseRecorder",
			Handler:    _PoplarMetricsRecorder_CloseRecorder_Handler,
		},
		{
			MethodName: "BeginEvent",
			Handler:    _PoplarMetricsRecorder_BeginEvent_Handler,
		},
		{
			MethodName: "ResetEvent",
			Handler:    _PoplarMetricsRecorder_ResetEvent_Handler,
		},
		{
			MethodName: "EndEvent",
			Handler:    _PoplarMetricsRecorder_EndEvent_Handler,
		},
		{
			MethodName: "SetTime",
			Handler:    _PoplarMetricsRecorder_SetTime_Handler,
		},
		{
			MethodName: "SetDuration",
			Handler:    _PoplarMetricsRecorder_SetDuration_Handler,
		},
		{
			MethodName: "SetTotalDuration",
			Handler:    _PoplarMetricsRecorder_SetTotalDuration_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _PoplarMetricsRecorder_SetState_Handler,
		},
		{
			MethodName: "SetWorkers",
			Handler:    _PoplarMetricsRecorder_SetWorkers_Handler,
		},
		{
			MethodName: "SetFailed",
			Handler:    _PoplarMetricsRecorder_SetFailed_Handler,
		},
		{
			MethodName: "IncOps",
			Handler:    _PoplarMetricsRecorder_IncOps_Handler,
		},
		{
			MethodName: "IncSize",
			Handler:    _PoplarMetricsRecorder_IncSize_Handler,
		},
		{
			MethodName: "IncError",
			Handler:    _PoplarMetricsRecorder_IncError_Handler,
		},
		{
			MethodName: "IncIterations",
			Handler:    _PoplarMetricsRecorder_IncIterations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder.proto",
}

func init() { proto.RegisterFile("recorder.proto", fileDescriptor_recorder_801c0285f67aa560) }

var fileDescriptor_recorder_801c0285f67aa560 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0xc7, 0x39, 0xad, 0x77, 0xe9, 0xb4, 0x57, 0x6a, 0xe8, 0x49, 0x7b, 0x0f, 0x5a, 0xee, 0xa9,
	0x4f, 0x29, 0x54, 0xd4, 0xab, 0x50, 0x94, 0x6b, 0x4f, 0xd8, 0x07, 0xa9, 0x64, 0x0b, 0x82, 0x0f,
	0xc2, 0x36, 0x19, 0x8f, 0xc5, 0xcd, 0x6e, 0xd8, 0x9d, 0xeb, 0x83, 0xff, 0x8d, 0xff, 0xa9, 0x24,
	0x9b, 0xc4, 0x1f, 0xb9, 0x28, 0xb1, 0x4f, 0xc9, 0x4e, 0xbe, 0x9f, 0xef, 0xec, 0xcc, 0x64, 0x60,
	0xcf, 0x62, 0x62, 0x6c, 0x8a, 0x36, 0xca, 0xad, 0x21, 0x13, 0x0e, 0x73, 0x93, 0x2b, 0x61, 0xa7,
	0xbb, 0xfe, 0xe9, 0xa3, 0xd3, 0x67, 0x2b, 0x63, 0x56, 0x0a, 0x4f, 0xcb, 0xd3, 0xed, 0xfa, 0xcb,
	0x29, 0xc9, 0x0c, 0x1d, 0x89, 0x2c, 0xaf, 0x04, 0x4f, 0xff, 0x14, 0xa4, 0x6b, 0x2b, 0x48, 0x1a,
	0xed, 0xbf, 0xcf, 0x38, 0x8c, 0x97, 0x77, 0xa8, 0x89, 0xa3, 0x4e, 0x6f, 0x64, 0x86, 0x61, 0x08,
	0x5b, 0x5a, 0x64, 0x78, 0x38, 0x38, 0x1e, 0x9c, 0x6c, 0xc7, 0xe5, 0x7b, 0x18, 0xc1, 0x56, 0xe1,
	0x7b, 0xf8, 0xe0, 0x78, 0x70, 0xb2, 0x73, 0x36, 0x8d, 0xbc, 0x67, 0x54, 0x7b, 0x46, 0x37, 0x75,
	0xd2, 0xb8, 0xd4, 0xcd, 0xe6, 0xb0, 0xdb, 0x98, 0x32, 0x4d, 0x1b, 0x3d, 0x0f, 0xe0, 0xd1, 0x9d,
	0x50, 0x6b, 0x6f, 0xfa, 0x30, 0xf6, 0x87, 0xd9, 0xf9, 0x2f, 0xd7, 0x59, 0x18, 0xa3, 0xfe, 0x8d,
	0x06, 0x35, 0xfa, 0x19, 0x1e, 0x37, 0xe8, 0x55, 0x55, 0xe4, 0x46, 0xfc, 0x05, 0x04, 0x75, 0x13,
	0xaa, 0x8a, 0x8e, 0x5a, 0x15, 0xd5, 0x06, 0x71, 0x23, 0x3d, 0xfb, 0x3e, 0x82, 0xc9, 0x87, 0xb2,
	0xf7, 0xef, 0x91, 0xac, 0x4c, 0x5c, 0x5c, 0x0d, 0x28, 0x7c, 0x03, 0x7b, 0x97, 0x16, 0x05, 0x61,
	0x13, 0x99, 0x44, 0xd5, 0x94, 0x7c, 0xfc, 0x3a, 0x2f, 0x1c, 0xdc, 0xf4, 0x49, 0x1d, 0xf6, 0x3e,
	0x31, 0xba, 0xdc, 0x68, 0x87, 0xe1, 0x39, 0x8c, 0x2f, 0x95, 0x71, 0x3f, 0xf9, 0xfd, 0xdf, 0x85,
	0xec, 0xaa, 0x13, 0x7d, 0x09, 0xb0, 0xc0, 0x95, 0xd4, 0x65, 0xe9, 0xfd, 0xb8, 0x18, 0x1d, 0x52,
	0x5f, 0xee, 0x02, 0x82, 0xa5, 0x4e, 0x3d, 0x75, 0x54, 0x6b, 0x5a, 0x7d, 0xef, 0xc4, 0xe7, 0x30,
	0xe2, 0x48, 0xe5, 0x8f, 0x36, 0x69, 0xd1, 0x45, 0xb8, 0x93, 0x7c, 0x0b, 0x3b, 0x1c, 0xa9, 0x19,
	0xec, 0x7f, 0xe4, 0x5e, 0xc2, 0x7e, 0x91, 0xdb, 0x90, 0x50, 0xf7, 0xb1, 0x99, 0x43, 0xc0, 0x91,
	0x38, 0x09, 0xc2, 0xf0, 0xa0, 0x85, 0x33, 0x4d, 0x9d, 0xe4, 0x6b, 0x00, 0x8e, 0xf4, 0xd1, 0xd8,
	0xaf, 0x68, 0x5d, 0x6f, 0x76, 0x9b, 0x23, 0xbd, 0x13, 0x52, 0x61, 0xba, 0xa1, 0x75, 0xc5, 0xae,
	0xfc, 0x65, 0xd6, 0x43, 0xa6, 0x93, 0xeb, 0xbc, 0x6f, 0xce, 0x57, 0x30, 0x62, 0x3a, 0xe1, 0xf2,
	0x5b, 0xdf, 0x42, 0xe7, 0x10, 0x30, 0x9d, 0x2c, 0xad, 0x35, 0xb6, 0x27, 0x79, 0x01, 0x63, 0xa6,
	0x13, 0x46, 0xe8, 0x87, 0xd0, 0xf3, 0xc6, 0x0b, 0xf8, 0x14, 0x48, 0x4d, 0x68, 0xb5, 0x50, 0xb7,
	0xc3, 0x72, 0x99, 0x9f, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x72, 0xe0, 0xb5, 0x49, 0x05,
	0x00, 0x00,
}
